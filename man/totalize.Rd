% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/totalize.R
\name{totalize}
\alias{totalize}
\title{Aggregate values by groups and add their group total}
\usage{
totalize(
  data,
  row,
  col = NULL,
  val = NULL,
  FUN = sum,
  asDF = FALSE,
  drop = FALSE,
  label_abbr = NA,
  ...
)
}
\arguments{
\item{data}{A data.frame.}

\item{row}{The name(s) or index number(s) of the column(s) to be used for row grouping.}

\item{col}{The name(s) or index number(s) of the column(s) to be used for column grouping.}

\item{val}{The name or index number of the column containing values to be aggregated. If not specified, data counts will be returned.}

\item{FUN}{A scalar function to be applied to each group (e.g., \code{sum}, \code{mean}).}

\item{asDF}{If \code{TRUE}, the result will be returned as a data.frame.}

\item{drop}{Whether to drop or retain unused factor levels in the data. This parameter is only relevant when \code{asDF = TRUE}.}

\item{label_abbr}{The length which row and column names in the result matrix will be abbreviated to. This parameter is only relevant when \code{asDF = FALSE}.}

\item{...}{Further arguments passed to \code{FUN}.}
}
\value{
A matrix (or a list of matrices) when \code{asDF = FALSE}. If \code{asDF = TRUE}, a data.frame is returned.
Matrix representation displays all possible combinations of row and column groups, with \code{NA} for combinations not present in the data.
A data.frame result can exclude these unused combinations.
}
\description{
Aggregate values by specified groups and adds their group totals.
If two or more grouping variables are provided, \code{totalize} calculates subtotals for each group and an overall grand total.
It performs these calculations using standard R functions (e.g., \code{sum}, \code{mean}).
}
\details{
The \code{row}, \code{col}, and \code{val} parameters support 'non-standard evaluation' (NSE).
This means you can provide column names directly without quoting them (see examples).
These parameters also accept column index numbers from the input data.
}
\examples{
totalize(CO2, conc, c(Type, Treatment))
totalize(CO2, conc, c(Type, Treatment), uptake, FUN=mean)

# Unused combinations
totalize(esoph, agegp, c(alcgp, tobgp), ncases)
totalize(esoph, agegp, c(alcgp, tobgp), ncases, asDF=TRUE, drop=TRUE)

# NA handling
totalize(penguins, species, island)
totalize(penguins, species, island, body_mass, FUN=sum, na.rm=TRUE)

# Weighted mean calculation (Creating random weights for example)
CO2_Weight <- transform(CO2, weight = rnorm(nrow(CO2), 10, 1))
CO2_Weight <- transform(CO2_Weight, uptake_w = uptake * weight)
uptake_w_sum <- totalize(CO2_Weight, Type, Treatment, val=uptake_w, asDF=TRUE)
weight_sum <- totalize(CO2_Weight, Type, Treatment, val=weight, asDF=TRUE)
transform(uptake_w_sum, uptake_mean = uptake_w_sum$uptake_w / weight_sum$weight)
# or
uptake_w_sum <- totalize(CO2_Weight, Type, Treatment, val=uptake_w)
weight_sum <- totalize(CO2_Weight, Type, Treatment, val=weight)
uptake_w_sum / weight_sum

}
